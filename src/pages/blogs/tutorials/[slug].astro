---
import { getCollection, getEntries, getEntry, render } from "astro:content";
import type { TechArticle, WithContext } from "schema-dts";
import Header from "../../../components/Header.astro";
import PostCards from "../../../components/PostCards.astro";
import PostTags from "../../../components/PostTags.astro";
import Prose from "../../../components/Prose.astro";
import Layout from "../../../layouts/Layout.astro";
import { sortByPublishDate } from "../../../lib/utils";

export const prerender = true;

export async function getStaticPaths() {
  const data = await getCollection("tutorials");

  return data.map((post) => {
    return {
      params: { slug: post.id },
      props: { post },
    };
  });
}

const { post } = Astro.props;
const { Content, remarkPluginFrontmatter } = await render(post);
// Get the author and related posts
const author = await getEntry("authors", post.data.author.id);
const relatedPosts = sortByPublishDate(
  await getEntries(post.data.relatedPosts),
  "desc"
);

const schema: WithContext<TechArticle> = {
  "@context": "https://schema.org",
  "@type": "TechArticle",
  // specific to TechArticle schema
  proficiencyLevel: post.data.proficiencyLevel,
  // specific to Article schema
  articleBody: post.body,
  articleSection: "Tutorials",
  wordCount: remarkPluginFrontmatter.words,
  // common
  headline: post.data.title,
  description: post.data.description,
  author: {
    "@type": "Person",
    name: author?.data.name,
    image: author?.data.image,
    url: author?.data.github,
  },
  publisher: {
    "@type": "Organization",
    name: "CSSéducteur",
    logo: {
      "@type": "ImageObject",
      url: new URL("favicon.svg", Astro.site).toString(),
    },
  },
  url: new URL(Astro.url.pathname, Astro.site).toString(),
  about: post.data.tags.map((tag) => ({
    "@type": "Thing",
    "@id": new URL(`/blogs/tutorials/${tag}`, Astro.site).toString(),
    name: tag,
  })),
  isPartOf: {
    "@type": "Blog",
    "@id": new URL("", Astro.site).toString(),
  },
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": new URL(Astro.url.pathname, Astro.site).toString(),
  },
  keywords: post.data.tags.join(", "),
  datePublished: post.data.publishDate.toDateString(),
  dateModified: post.data.publishDate.toDateString(),
};
---

<Layout
  url={new URL(Astro.url.pathname, Astro.site).toString()}
  title={`${post.data.title}`}
  description={post.data.description}
  schema={JSON.stringify(schema)}
>
  <Header />
  <main class="p-4 max-w-[800px] mx-auto text-color-contrast">
    <article>
      <h1 class="text-[60px] max-sm:text-[36px] leading-none mt-7 mb-4">
        {post.data.title}
      </h1>
      <a
        href={author?.data.github}
        class="w-max flex gap-2 items-center mb-6 transition-all hover:scale-[1.005]"
      >
        <img
          src={author?.data.image}
          alt={author?.data.name}
          class="size-8 rounded-full"
        />
        <p>{author?.data.name}</p>
      </a>
      <div class="flex gap-2 mb-6">
        <PostTags tags={post.data.tags} />
      </div>
      <p class="text-sm font-light">
        Temps estimé de lecture : {
          (remarkPluginFrontmatter.minutesRead as string).replace("read", "")
        }
      </p>
      <p class="font-extralight mt-2 mb-5">{post.data.description}</p>
      <Prose>
        <Content />
      </Prose>

      <section class="mt-12">
        <h1 class="text-[36px] max-md:text-3xl text-center font-semibold my-4">
          Articles connexes
        </h1>
        <PostCards posts={relatedPosts} />
      </section>
    </article>
  </main>
</Layout>
